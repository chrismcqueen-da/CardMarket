module CcgMarket where

data CardDescription = CardDescription with
    publisher: Party
    description: Text
  deriving (Show, Eq)

template ProposeMarket
    with
        manager: Party
        auditor: Party
    where
        signatory manager
        ensure manager /= auditor

        choice AcceptMarket : ContractId Marketplace with
         controller auditor
            do
              create $ Marketplace manager auditor [] [] [] []


template Marketplace
    with
        manager: Party
        auditor: Party
        players: [Party]
        publishers: [Party]
        invitedPlayers: [Party]
        invitedPublishers: [Party]
    where
        signatory manager, auditor
        observer players <> publishers <> invitedPlayers <> invitedPublishers

        nonconsuming choice IssueCard: ContractId CardOffer
            with
                owner: Party
                description: CardDescription
            controller description.publisher
            do
                assert $ description.publisher `elem` publishers
                create CardOffer with manager; auditor; owner; description

        nonconsuming choice SettleSwapObligation : (ContractId Card, ContractId Card) with
           obligation: ContractId SwapObligation
           card1Id: ContractId Card
           card2Id: ContractId Card
         controller manager
            do
              exercise obligation SettleObligation with card1Id; card2Id

        choice InvitePublisher: ContractId Marketplace
            with
              invitee: Party
            controller manager
              do
                assert $ invitee `notElem` publishers
                assert $ invitee `notElem` invitedPublishers
                create this with invitedPublishers = invitee :: invitedPublishers

        choice InvitePlayer: ContractId Marketplace
          with
            invitee: Party
          controller manager
            do
              assert $ invitee `notElem` publishers
              assert $ invitee `notElem` invitedPlayers
              create this with invitedPlayers = invitee :: invitedPlayers

        choice AcceptPublisher: ContractId Marketplace
            with
                accepter: Party
            controller accepter
              do
                assert $ accepter `elem` invitedPublishers
                create this with
                    publishers = accepter :: publishers
                    invitedPublishers = filter ((/=) accepter) invitedPublishers
        
        choice AcceptPlayer: ContractId Marketplace
            with
                accepter: Party
            controller accepter
              do
                assert $ accepter `elem` invitedPlayers
                create this with
                    players = accepter :: players
                    invitedPlayers = filter ((/=) accepter) invitedPlayers
        
        choice UpdateCard: ContractId Card
          with
            cardId: ContractId Card
            owner: Party
            description: CardDescription            
          controller manager, auditor
            do
              card <- fetch cardId
              assertMsg "Issue with card" $ card.manager == manager
              assertMsg "Issue with card" $ card.auditor == auditor

              exercise cardId Archive
              create card with owner; description              

template CardOffer
    with
        manager: Party
        auditor: Party
        owner: Party
        description: CardDescription
    where
        signatory manager, auditor, description.publisher
        observer owner

        choice AcceptCard: ContractId Card 

          controller owner 
            do
              create Card with manager; auditor; owner; description

template Card
    with
        manager: Party
        auditor: Party
        owner: Party
        description: CardDescription
    where
        signatory manager, auditor, description.publisher, owner

        choice TransferCard: ContractId Card
            with
                recipent: Party
            controller [ manager, auditor, owner, recipent ]
            do
                create Card with
                    manager
                    auditor
                    owner = recipent
                    description

template SwapOfferToTreat
    with
        player: Party
        informees: [Party]
        card: Card
    where
        signatory player
        observer informees
        ensure card.owner == player

        nonconsuming choice AcceptOfferToTreat: ContractId SwapOfferToContract
            with
                counter: Party
                counterCard: Card
            controller counter
                do
                    assertMsg "Card manager has an issue" $ card.manager == counterCard.manager
                    assertMsg "Card auditor has an issue" $ card.auditor == counterCard.auditor
                    assertMsg "Card owner has an issue" $ card.owner == player
                    assertMsg "Card counter has an issue" $ counterCard.owner == counter

                    create SwapOfferToContract with player; offerId = self; counter; counterCard
        
template SwapOfferToContract
    with
        player: Party
        offerId: ContractId SwapOfferToTreat
        counter: Party
        counterCard: Card
    where
        signatory counter
        ensure counterCard.owner == counter

        choice AcceptProposal: ContractId SwapObligation
        
          controller player
            do
              offer <- fetch offerId
              assertMsg "issue with proposal" $ offer.card.manager == counterCard.manager
              assertMsg "issue with proposal" $ offer.card.auditor == counterCard.auditor
              assertMsg "issue with proposal" $ offer.card.owner == player
              assertMsg "issue with proposal" $ counterCard.owner == counter

              exercise offerId Archive
              create SwapObligation with
                  manager = counterCard.manager
                  auditor = counterCard.auditor
                  party1 = player
                  card1 = offer.card
                  party2 = counter
                  card2 = counterCard

template SwapObligation
    with
        manager: Party
        auditor: Party
        party1: Party
        card1: Card
        party2: Party
        card2: Card
    where
        signatory party1, party2

        choice SettleObligation: (ContractId Card, ContractId Card)
          with
            card1Id: ContractId Card
            card2Id: ContractId Card
          controller manager, auditor    
            do
              ledgerCard1 <- fetch card1Id
              assertMsg "Issue with card" $ card1 == ledgerCard1
              ledgerCard2 <- fetch card2Id
              assertMsg "Issue with card" $ card2 == ledgerCard2
              
              (,) <$> exercise card2Id TransferCard with recipent = party1
                  <*> exercise card1Id TransferCard with recipent = party2
