{-# LANGUAGE ApplicativeDo #-}

daml 1.2
module CcgMarket
where

data CardDescription = CardDescription with
    publisher: Party
    description: Text
  deriving (Show, Eq)

template ProposeMarket
    with
        registry: Party
        auditor: Party
    where
        signatory registry
        ensure registry /= auditor

        controller auditor can
            AcceptMarket: ContractId Marketplace do
                create $ Marketplace registry auditor [] [] [] []

template Marketplace
    with
        registry: Party
        auditor: Party
        players: [Party]
        publishers: [Party]
        invitedPlayers: [Party]
        invitedPublishers: [Party]
    where
        signatory registry, auditor
        observer players <> publishers <> invitedPlayers <> invitedPublishers

        nonconsuming choice IssueCard: ContractId CardOffer
            with
                owner: Party
                description: CardDescription
            controller description.publisher
            do
                assert $ description.publisher `elem` publishers
                create CardOffer with registry; auditor; owner; description

        controller registry can
            nonconsuming SettleSwapObligation: (ContractId Card, ContractId Card)
                with
                    obligation: ContractId SwapObligation
                    card1Id: ContractId Card
                    card2Id: ContractId Card
                do
                    exercise obligation SettleObligation with card1Id; card2Id

            InvitePublisher: ContractId Marketplace
                with
                    invitee: Party
                do
                    assert $ invitee `notElem` publishers
                    assert $ invitee `notElem` invitedPublishers
                    create this with invitedPublishers = invitee :: invitedPublishers

            InvitePlayer: ContractId Marketplace
                with
                    invitee: Party
                do
                    assert $ invitee `notElem` publishers
                    assert $ invitee `notElem` invitedPlayers
                    create this with invitedPlayers = invitee :: invitedPlayers

        choice AcceptPublisher: ContractId Marketplace
            with
                accepter: Party
            controller accepter
            do
                assert $ accepter `elem` invitedPublishers
                create this with
                    publishers = accepter :: publishers
                    invitedPublishers = filter ((/=) accepter) invitedPublishers
        
        choice AcceptPlayer: ContractId Marketplace
            with
                accepter: Party
            controller accepter
            do
                assert $ accepter `elem` invitedPlayers
                create this with
                    players = accepter :: players
                    invitedPlayers = filter ((/=) accepter) invitedPlayers
        
        controller registry, auditor can
            UpdateCard: ContractId Card
                with
                    cardId: ContractId Card
                    owner: Party
                    description: CardDescription
                do
                    card <- fetch cardId
                    assert $ card.registry == registry
                    assert $ card.auditor == auditor

                    exercise cardId Archive
                    create card with owner; description

template CardOffer
    with
        registry: Party
        auditor: Party
        owner: Party
        description: CardDescription
    where
        signatory registry, auditor, description.publisher
        observer owner

        controller owner can
            AcceptCard: ContractId Card do
                create Card with registry; auditor; owner; description

template Card
    with
        registry: Party
        auditor: Party
        owner: Party
        description: CardDescription
    where
        signatory registry, auditor, description.publisher, owner

        choice TransferCard: ContractId Card
            with
                recipent: Party
            controller [ registry, auditor, owner, recipent ]
            do
                create Card with
                    registry
                    auditor
                    owner = recipent
                    description

template SwapOfferToTreat
    with
        player: Party
        informees: [Party]
        card: Card
    where
        signatory player
        observer informees
        ensure card.owner == player

        nonconsuming choice AcceptOfferToTreat: ContractId SwapOfferToContract
            with
                counter: Party
                counterCard: Card
            controller counter
                do
                    assert $ card.registry == counterCard.registry
                    assert $ card.auditor  == counterCard.auditor
                    assert $ card.owner    == player
                    assert $ counterCard.owner    == counter

                    create SwapOfferToContract with player; offerId = self; counter; counterCard
        
template SwapOfferToContract
    with
        player: Party
        offerId: ContractId SwapOfferToTreat
        counter: Party
        counterCard: Card
    where
        signatory counter
        ensure counterCard.owner == counter

        controller player can
            AcceptProposal: ContractId SwapObligation
                do
                    offer <- fetch offerId
                    assert $ offer.card.registry == counterCard.registry
                    assert $ offer.card.auditor == counterCard.auditor
                    assert $ offer.card.owner == player
                    assert $ counterCard.owner == counter

                    exercise offerId Archive
                    create SwapObligation with
                        registry = counterCard.registry
                        auditor = counterCard.auditor
                        party1 = player
                        card1 = offer.card
                        party2 = counter
                        card2 = counterCard

template SwapObligation
    with
        registry: Party
        auditor: Party
        party1: Party
        card1: Card
        party2: Party
        card2: Card
    where
        signatory party1, party2

        controller registry, auditor can
            SettleObligation: (ContractId Card, ContractId Card)
                with
                    card1Id: ContractId Card
                    card2Id: ContractId Card
                do
                    ledgerCard1 <- fetch card1Id
                    assert $ card1 == ledgerCard1
                    ledgerCard2 <- fetch card2Id
                    assert $ card2 == ledgerCard2
                    
                    (,) <$> exercise card2Id TransferCard with recipent = party1
                        <*> exercise card1Id TransferCard with recipent = party2
