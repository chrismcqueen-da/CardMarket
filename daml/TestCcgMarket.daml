daml 1.2
module TestCcgMarket
where

import CcgMarket

swapTrade : Scenario ()
swapTrade = do
    -----------------
    -- Market Setup
    -----------------

    -- Set up the participants in the marketplace
    -- Market operator and regulator/auditor
    registry <- getParty "Show me the money"
    auditor <- getParty "You cant have it"
    -- Publishers
    inlandSorc <- getParty "Inland Sorcerers"
    nineDisc <- getParty "Nine Disc Publishers"
    -- Gamers
    alice <- getParty "Alice"
    bob <- getParty "Bob"

    -- Setup the market and have the participants join
    mkp <- registry `submit` create ProposeMarket with registry; auditor
    market <- auditor `submit` exercise mkp AcceptMarket
    market <- registry `submit` exercise market InvitePublisher with invitee = inlandSorc
    market <- registry `submit` exercise market InvitePublisher with invitee = nineDisc
    market <- registry `submit` exercise market InvitePlayer with invitee = alice
    market <- registry `submit` exercise market InvitePlayer with invitee = bob
    market <- inlandSorc `submit` exercise market AcceptPublisher with accepter = inlandSorc
    market <- nineDisc `submit` exercise market AcceptPublisher with accepter = nineDisc
    -- Note: Bob cannot accept on behalf of alice
    bob `submitMustFail` exercise market AcceptPlayer with accepter = alice
    market <- alice `submit` exercise market AcceptPlayer with accepter = alice
    market <- bob `submit` exercise market AcceptPlayer with accepter = bob

    -- Issue two cards to Alice and Bob
    int <- inlandSorc `submit` exercise market IssueCard with 
                owner = alice
                description = CardDescription with publisher = inlandSorc; description = "Immovable Force"
    forceId <- alice `submit` exercise int AcceptCard
    force <- alice `submit` fetch forceId

    int <- nineDisc `submit` exercise market IssueCard with 
                owner = bob
                description = CardDescription with publisher = nineDisc; description = "Irresistable Object"
    objectId <- bob `submit` exercise int AcceptCard
    object <- bob `submit` fetch objectId

    ---------------------------------
    -- Privacy Demonstration Part 1
    ---------------------------------

    -- Alice doesn't know Bob's cards and vis versa
    alice `submitMustFail` fetch objectId
    bob `submitMustFail` fetch forceId
    -- Publishers know who owns their cards
    inlandSorc `submit` fetch forceId
    nineDisc `submit` fetch objectId
    -- But don't know who owns other cards
    inlandSorc `submitMustFail` fetch objectId
    nineDisc `submitMustFail` fetch forceId
    -- But the registry and auditor can see all ownership
    registry `submit` fetch forceId
    registry `submit` fetch objectId
    auditor `submit` fetch forceId
    auditor `submit` fetch objectId

    -----------------------------------
    -- Sale via Delgation to Registry
    -----------------------------------

    -- Alice doesn't want her card and offers to swap
    aliceOffer <- alice `submit` create SwapOfferToTreat with player = alice; card = force; informees = [ bob ]
    -- Bob can see the offer, but Publishers can't
    bob `submit` fetch aliceOffer
    inlandSorc `submitMustFail` fetch aliceOffer
    nineDisc `submitMustFail` fetch aliceOffer
    
    -- Bob decides to offer to swap his card with Alice
    bobProposal <- bob `submit` exercise aliceOffer AcceptOfferToTreat with counter = bob; counterCard = object

    -- Alice's offer is still valid ...
    alice `submit` fetch aliceOffer

    -- ... until Alice accepts Bob's proposal
    obligation <- alice `submit` exercise bobProposal AcceptProposal

    -- Then the offer is archived
    alice `submitMustFail` fetch aliceOffer
    -- As is Bob's proposal
    alice `submitMustFail` fetch bobProposal

    -- Instead there is now a SwapObligation
    -- This is needed because, even at this point, Bob and Alice can't see each other's cards on the ledger
    alice `submitMustFail` fetch objectId
    bob `submitMustFail` fetch forceId
    
    -- So the registry completes the trade
    -- But is prevented from bypassing the auditor
    registry `submitMustFail` exercise obligation SettleObligation with card1Id = forceId; card2Id = objectId
    -- So must use the MSA to get the delgated authorization of the auditor (which also gives the auditor visibility on the trade)
    (aliceCard, bobCard) <- registry `submit` exercise market SettleSwapObligation with obligation; card1Id = forceId; card2Id = objectId

    ----------------------------
    -- Final Visibility Checks
    ----------------------------

    -- Alice and Bob has swapped their respective cards
    alice `submit` fetch aliceCard
    bob `submit` fetch bobCard
    -- But can't see each other's
    alice `submitMustFail` fetch bobCard
    bob `submitMustFail` fetch aliceCard

    -- Finally, the old cards have been archived ...
    inlandSorc `submitMustFail` fetch forceId
    nineDisc `submitMustFail` fetch objectId
    -- ... and have been informed of the new card owners
    inlandSorc `submit` fetch bobCard
    nineDisc `submit` fetch aliceCard

    pure ()
