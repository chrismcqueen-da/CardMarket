{-# LANGUAGE ApplicativeDo #-}

daml 1.2
module ByStagePart1.S09DelegateCreate
where

data CardDescription = CardDescription with
    publisher: Party
    cardText: Text
  deriving (Eq, Show)

template ProposeMarket
    with
        manager: Party
        auditor: Party
    where
        signatory manager

        controller auditor can
            AcceptMarket: ContractId Marketplace
                do create $ Marketplace manager auditor [] [] []

template Marketplace
    with
        manager: Party
        auditor: Party
        publishers: [Party]
        invitedPublishers: [Party]
        players: [Party]
    where
        signatory manager, auditor
        observer publishers, invitedPublishers, players

        controller manager can
            InvitePublisher: ContractId Marketplace
                with
                    invitee: Party
                do
                    assert $ invitee `notElem` invitedPublishers
                    assert $ invitee `notElem` publishers
                    create this with invitedPublishers = invitee :: invitedPublishers

        choice AcceptPublisher: ContractId Marketplace
            with
                accepter: Party
            controller accepter
                do
                    assert $ accepter `elem` invitedPublishers
                    create this with
                        publishers = accepter :: publishers
                        invitedPublishers = filter ((/=) accepter) invitedPublishers

        -------------------------------------------------------------------------------
        -- Again, the need for "any one of" the publishers requires the use of the
        --   more flexible choice syntax. Note that here the market manager is
        --   delegating an entire (if only 1-step) workflow to non-signatories who
        --   the manager and auditor have agreed should have the right to perform it
        -------------------------------------------------------------------------------
        choice AddPlayer: ContractId Marketplace
            with
                publisher: Party
                player: Party
            controller publisher
                do
                    assert $ publisher `elem` publishers
                    assert $ player `notElem` players
                    create this with players = player :: players

template Card
    with
        manager: Party
        auditor: Party
        owner: Party
        description: CardDescription
    where
        signatory owner, manager, auditor, description.publisher






demoCreateMarket = scenario do
    -----------------
    -- Market Setup
    -----------------

    -- Set up the participants in the marketplace
    -- Market operator and regulator/auditor
    manager <- getParty "I want the money"
    auditor <- getParty "You cant have it"
    -- Publishers
    inlandSorc <- getParty "Inland Sorcerers"
    nineDisc <- getParty "Nine Disc Publishers"
    -- Gamers
    alice <- getParty "Alice"
    bob <- getParty "Bob"

    -- Setup the market and have the participants join
    mkp <- manager `submit` create ProposeMarket with manager; auditor
    market <- auditor `submit` exercise mkp AcceptMarket

    ---------------------
    -- Setup Publishers
    ---------------------

    market <- manager `submit` exercise market InvitePublisher with invitee = inlandSorc
    market <- manager `submit` exercise market InvitePublisher with invitee = nineDisc
    market <- inlandSorc `submit` exercise market AcceptPublisher with accepter = inlandSorc
    market <- nineDisc `submit` exercise market AcceptPublisher with accepter = nineDisc

    ------------------
    -- Setup Players
    ------------------

    market <- inlandSorc `submit` exercise market AddPlayer with publisher = inlandSorc; player = alice
    market <- nineDisc `submit` exercise market AddPlayer with publisher = nineDisc; player = bob

    -- Note: Market rules do not allow the manager to add players, only publishers
    -- manager `submit` exercise market AddPlayer with publisher = nineDisc; player = bob
    manager `submitMustFail` exercise market AddPlayer with publisher = nineDisc; player = bob

    pure ()
