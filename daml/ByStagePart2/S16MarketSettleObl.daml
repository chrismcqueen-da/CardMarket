{-# LANGUAGE ApplicativeDo #-}

daml 1.2
module ByStagePart2.CcgStage14
where

data CardDescription = CardDescription with
    publisher: Party
    cardText: Text
  deriving (Eq, Show)

template ProposeMarket
    with
        manager: Party
        auditor: Party
    where
        signatory manager

        controller auditor can
            AcceptMarket: ContractId Marketplace
                do create $ Marketplace manager auditor [] [] []

template Marketplace
    with
        manager: Party
        auditor: Party
        publishers: [Party]
        invitedPublishers: [Party]
        players: [Party]
    where
        signatory manager, auditor
        observer publishers, invitedPublishers, players

        controller manager can
            InvitePublisher: ContractId Marketplace
                with
                    invitee: Party
                do
                    assert $ invitee `notElem` invitedPublishers
                    assert $ invitee `notElem` publishers
                    create this with invitedPublishers = invitee :: invitedPublishers

            ---------------------------------------------------------------------------------
            -- So far, this is the only workflow the auditor has approved for settling
            --   SwapObligations. As the SettleObligation choice requires the authorization
            --   of BOTH the manager and auditor, this is therefore the only way the manager
            --   has to settle an obligation.
            --
            -- Note: There is nothing preventing the auditor from writing and creating an
            --   alternate contract to authorize a special settlement, possibly to reflect
            --   reglatory or legislative changes, or to honour a legal judgement, or just
            --   an operational fix in good-faith.
            --
            -- Note: Until we reach a choice with precisely one controller, we cannot
            --   interact with a workflow from outside a DAML transaction. Commands have
            --   precisely ONE authorizer, and so can only exercise choices with precisely
            --   ONE required authorizing party/controller.
            ---------------------------------------------------------------------------------
            nonconsuming SettleSwapObligation: (ContractId Card, ContractId Card)
                with
                    obligationId: ContractId SwapObligation
                    offererCardId: ContractId Card
                    offereeCardId: ContractId Card
                do
                    exercise obligationId SettleObligation with marketId = self; offererCardId; offereeCardId

        choice AcceptPublisher: ContractId Marketplace
            with
                accepter: Party
            controller accepter
                do
                    assert $ accepter `elem` invitedPublishers
                    create this with
                        publishers = accepter :: publishers
                        invitedPublishers = filter ((/=) accepter) invitedPublishers

        choice AddPlayer: ContractId Marketplace
            with
                publisher: Party
                player: Party
            controller publisher
                do
                    assert $ publisher `elem` publishers
                    assert $ player `notElem` players
                    create this with players = player :: players

        nonconsuming choice IssueCard: ContractId CardOffer
            with
                description: CardDescription
                player: Party
            controller description.publisher
                do
                    assert $ description.publisher `elem` publishers
                    assert $ player `elem` players
                    create CardOffer with manager; auditor; player; description

        nonconsuming choice UpdateCardText: ContractId Card
            with
                publisher: Party
                cardId: ContractId Card
                newText: Text
            controller publisher
                do
                    card <- fetch cardId
                    assert $ publisher == card.description.publisher
                    exercise cardId UpdateText with newText

template CardOffer
    with
        manager: Party
        auditor: Party
        player: Party
        description: CardDescription
    where
        signatory manager, auditor, description.publisher

        controller player can
            AcceptCard: ContractId Card
                do
                    create Card with manager; auditor; owner = player; description

template Card
    with
        manager: Party
        auditor: Party
        owner: Party
        description: CardDescription
    where
        signatory owner, manager, auditor, description.publisher

        controller manager, auditor, description.publisher can
            UpdateText: ContractId Card
                with
                    newText: Text
                do
                    create this with description = description with cardText = newText

        choice TransferCard: ContractId Card
            with
                recipient: Party
            controller owner, manager, auditor, recipient
            do
                create this with owner = recipient

template SwapObligation
    with
        offerer: Party
        offererCard: Card
        offeree: Party
        offereeCard: Card
    where
        signatory offerer, offeree
        observer offererCard.manager, offererCard.auditor
        ensure offererCard.owner == offerer
            && offereeCard.owner == offeree
            && offererCard.manager == offereeCard.manager
            && offereeCard.auditor == offereeCard.auditor

        controller offererCard.manager, offererCard.auditor can
            SettleObligation: (ContractId Card, ContractId Card)
                with
                    marketId: ContractId Marketplace
                    offererCardId: ContractId Card
                    offereeCardId: ContractId Card
                do
                    -- Check cards were issued via this market
                    market <- fetch marketId
                    assert $ market.manager == offererCard.manager
                    assert $ market.auditor == offererCard.auditor
                    assert $ offerer `elem` market.players
                    assert $ offeree `elem` market.players
                    assert $ offererCard.description.publisher `elem` market.publishers
                    assert $ offereeCard.description.publisher `elem` market.publishers

                    -- Check the cards are valid on the ledger
                    offererLedger <- fetch offererCardId
                    assert $ offererLedger == offererCard

                    offereeLedger <- fetch offereeCardId
                    assert $ offereeLedger == offereeCard

                    -- Perform atomic swap
                    (,) <$> exercise offererCardId TransferCard with recipient = offeree
                        <*> exercise offereeCardId TransferCard with recipient = offerer










demoCreateMarket = scenario do
    -----------------
    -- Market Setup
    -----------------

    -- Set up the participants in the marketplace
    -- Market operator and regulator/auditor
    manager <- getParty "I want the money"
    auditor <- getParty "You cant have it"
    -- Publishers
    inlandSorc <- getParty "Inland Sorcerers"
    nineDisc <- getParty "Nine Disc Publishers"
    -- Gamers
    alice <- getParty "Alice"
    bob <- getParty "Bob"

    -- Setup the market and have the participants join
    mkp <- manager `submit` create ProposeMarket with manager; auditor
    market <- auditor `submit` exercise mkp AcceptMarket

    ---------------------
    -- Setup Publishers
    ---------------------

    market <- manager `submit` exercise market InvitePublisher with invitee = inlandSorc
    market <- manager `submit` exercise market InvitePublisher with invitee = nineDisc
    market <- inlandSorc `submit` exercise market AcceptPublisher with accepter = inlandSorc
    market <- nineDisc `submit` exercise market AcceptPublisher with accepter = nineDisc

    ------------------
    -- Setup Players
    ------------------

    market <- inlandSorc `submit` exercise market AddPlayer with publisher = inlandSorc; player = alice
    market <- nineDisc `submit` exercise market AddPlayer with publisher = nineDisc; player = bob

    -- Note: Market rules do not allow the manager to add players, only publishers
    -- manager `submit` exercise market AddPlayer with publisher = nineDisc; player = bob
    manager `submitMustFail` exercise market AddPlayer with publisher = nineDisc; player = bob

    --------------------
    -- Issue two cards
    --------------------
    int <- inlandSorc `submit` exercise market IssueCard with
                player = alice
                description = CardDescription with publisher = inlandSorc; cardText = "Immovable Force"
    forceCardId <- alice `submit` exercise int AcceptCard
    force <- alice `submit` fetch forceCardId

    int <- nineDisc `submit` exercise market IssueCard with
                player = bob
                description = CardDescription with publisher = nineDisc; cardText = "Iresistable Obect"
    objectCardId <- bob `submit` exercise int AcceptCard

    -----------------
    -- Apply Errata
    -----------------

    objectCardId <- nineDisc `submit` exercise market UpdateCardText with
        publisher = nineDisc
        cardId = objectCardId
        newText = "Irresistable Object"

    ---------------------------------
    -- Privacy Demonstration Part 1
    ---------------------------------

    -- Alice doesn't know Bob's cards and vis versa
    alice `submitMustFail` fetch objectCardId
    bob `submitMustFail` fetch forceCardId

    -- Publishers know who owns their cards
    inlandSorc `submit` fetch forceCardId
    nineDisc `submit` fetch objectCardId

    -- But don't know who owns other cards
    inlandSorc `submitMustFail` fetch objectCardId
    nineDisc `submitMustFail` fetch forceCardId

    -- But the manager and auditor can see all ownership
    manager `submit` fetch forceCardId
    manager `submit` fetch objectCardId
    auditor `submit` fetch forceCardId
    auditor `submit` fetch objectCardId

    pure ()
