{-# LANGUAGE ApplicativeDo #-}

daml 1.2
module CcgStage2
where

data CardDescription = CardDescription with
    publisher: Party
    cardText: Text
  deriving (Eq, Show)

template Card
    with
        manager: Party
        auditor: Party
        owner: Party
        description: CardDescription
    where
        signatory owner, manager, auditor, description.publisher

        choice TransferCard: ContractId Card
            with
                recipient: Party
            controller owner, manager, auditor, recipient
                do
                    create this with owner = recipient

        controller manager, auditor, description.publisher can
            UpdateText: ContractId Card
                with
                    newText: Text
                do
                    create this with description = description with cardText = newText

template ProposeMarket
    with
        manager: Party
        auditor: Party
    where
        signatory manager

        controller auditor can
            AcceptMarket: ContractId Marketplace
                do create $ Marketplace manager auditor [] [] [] []

template Marketplace
    with
        manager: Party
        auditor: Party
        publishers: [Party]
        invitedPublishers: [Party]
        players: [Party]
        invitedPlayers: [Party]
    where
        signatory manager, auditor
        observer publishers, invitedPublishers, players, invitedPlayers

        controller manager can
            nonconsuming SettleSwapObligation: (ContractId Card, ContractId Card)
                with
                    obligationId: ContractId SwapObligation
                    offererCardId: ContractId Card
                    offereeCardId: ContractId Card
                do
                    exercise obligationId SettleObligation with marketId = self; offererCardId; offereeCardId

            InvitePublisher: ContractId Marketplace
                with
                    invitee: Party
                do
                    assert $ invitee `notElem` invitedPublishers
                    assert $ invitee `notElem` publishers
                    create this with invitedPublishers = invitee :: invitedPublishers
        
        choice AcceptPublisher: ContractId Marketplace
            with
                accepter: Party
            controller accepter
                do
                    assert $ accepter `elem` invitedPublishers
                    create this with
                        publishers = accepter :: publishers
                        invitedPublishers = filter ((/=) accepter) invitedPublishers
        
        choice InvitePlayer: ContractId Marketplace
            with
                invitor: Party
                invitee: Party
            controller invitor
                do
                    assert $ invitor `elem` publishers
                    assert $ invitee `notElem` invitedPlayers
                    assert $ invitee `notElem` players
                    create this with invitedPlayers = invitee :: invitedPlayers

        choice AcceptPlayer: ContractId Marketplace
            with
                accepter: Party
            controller accepter
                do
                    assert $ accepter `elem` invitedPlayers
                    create this with
                        players = accepter :: players
                        invitedPlayers = filter ((/=) accepter) invitedPlayers

        nonconsuming choice IssueCard: ContractId CardOffer
            with
                description: CardDescription
                player: Party
            controller description.publisher
                do
                    assert $ description.publisher `elem` publishers
                    assert $ player `elem` players
                    create CardOffer with manager; auditor; player; description

        nonconsuming choice UpdateCardText: ContractId Card
            with
                publisher: Party
                cardId: ContractId Card
                newText: Text
            controller publisher
                do
                    card <- fetch cardId
                    assert $ publisher == card.description.publisher
                    exercise cardId UpdateText with newText

template CardOffer
    with
        manager: Party
        auditor: Party
        player: Party
        description: CardDescription
    where
        signatory manager, auditor, description.publisher

        controller player can
            AcceptCard: ContractId Card
                do
                    create Card with manager; auditor; owner = player; description

template SwapOfferToTreat
    with
        player: Party
        card: Card
        informees: [Party]
    where
        signatory player
        observer informees
        ensure card.owner == player

        nonconsuming choice AcceptOfferToTreat: ContractId SwapOfferToContract
            with
                oOfferer: Party
                oOffererCard: Card
            controller oOfferer
                do
                    create SwapOfferToContract with
                        oOfferer
                        oOffererCard
                        oOfferee = player
                        oOffereeCard = card
                        offerToTreat = self

template SwapOfferToContract
    with
        oOfferer: Party
        oOffererCard: Card
        oOfferee: Party
        oOffereeCard: Card
        offerToTreat: ContractId SwapOfferToTreat
    where
        signatory oOfferer

        controller oOfferee can
            AcceptSwapOffer: ContractId SwapObligation
                do
                    exercise offerToTreat Archive
                    create SwapObligation with
                        offerer = oOfferer
                        offererCard = oOffererCard
                        offeree = oOfferee
                        offereeCard = oOffereeCard

template SwapObligation
    with
        offerer: Party
        offererCard: Card
        offeree: Party
        offereeCard: Card
    where
        signatory offerer, offeree
        observer offererCard.manager, offererCard.auditor
        ensure offererCard.owner == offerer 
            && offereeCard.owner == offeree
            && offererCard.manager == offereeCard.manager
            && offereeCard.auditor == offereeCard.auditor

        choice SettleObligation: (ContractId Card, ContractId Card)
            with
                marketId: ContractId Marketplace
                offererCardId: ContractId Card
                offereeCardId: ContractId Card
            controller offererCard.manager, offererCard.auditor
            do
                market <- fetch marketId
                assert $ market.manager == offererCard.manager
                assert $ market.auditor == offererCard.auditor
                assert $ offerer `elem` market.players
                assert $ offeree `elem` market.players
                assert $ offererCard.description.publisher `elem` market.publishers
                assert $ offereeCard.description.publisher `elem` market.publishers

                offererLedger <- fetch offererCardId
                assert $ offererLedger == offererCard

                offereeLedger <- fetch offereeCardId
                assert $ offereeLedger == offereeCard

                (,) <$> exercise offererCardId TransferCard with recipient = offeree
                    <*> exercise offereeCardId TransferCard with recipient = offerer
